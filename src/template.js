/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Template":3,"OuterNodeList":4,"EOF":5,"OuterNode":6,"MixinNode":7,"ImportNode":8,"ExportNode":9,"DefaultNode":10,"StatementNode":11,"MIXIN":12,"NAME":13,"BlockNode":14,"Argument":15,"IMPORT":16,"ImportPath":17,"{":18,"DestructureList":19,"}":20,"DestructureName":21,",":22,"AS":23,"DEFAULT":24,"SINGLE_QUOTE":25,"DOUBLE_QUOTE":26,"FROM":27,"ExportDeclaration":28,"EXPORT":29,"DefaultDeclaration":30,"InnerNodeList":31,"InnerNode":32,"IfNode":33,"TagNode":34,"ForNode":35,"CallNode":36,"StringNode":37,"ExpressionNode":38,"IF":39,"RawExpression":40,"ElseNode":41,"ELSE":42,":":43,"Attribute":44,"(":45,")":46,"AttributeList":47,"AttributeNode":48,"EXPRESSION":49,"=":50,"RawString":51,"FOR":52,"IN":53,"MIXIN_CALL":54,"CallArgumentList":55,"CallArgument":56,"NameList":57,"STRING_TOKEN":58,"CommentNode":59,"COMMENT":60,"STATEMENT":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"MIXIN",13:"NAME",16:"IMPORT",18:"{",20:"}",22:",",23:"AS",24:"DEFAULT",25:"SINGLE_QUOTE",26:"DOUBLE_QUOTE",27:"FROM",29:"EXPORT",39:"IF",42:"ELSE",43:":",45:"(",46:")",49:"EXPRESSION",50:"=",52:"FOR",53:"IN",54:"MIXIN_CALL",58:"STRING_TOKEN",60:"COMMENT",61:"STATEMENT"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[7,3],[7,4],[8,3],[8,5],[19,1],[19,3],[21,1],[21,3],[21,3],[17,1],[17,1],[17,2],[17,2],[9,3],[9,4],[28,1],[28,2],[10,2],[10,3],[10,3],[10,4],[30,1],[30,2],[31,1],[31,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[33,3],[33,4],[41,2],[41,3],[41,3],[41,4],[41,4],[41,5],[34,1],[34,3],[34,2],[34,4],[44,2],[44,3],[47,1],[47,2],[47,3],[48,1],[48,1],[48,3],[48,3],[35,3],[35,5],[35,7],[36,3],[36,4],[55,1],[55,3],[56,1],[56,1],[14,2],[14,3],[15,2],[15,3],[57,1],[57,3],[37,1],[51,1],[51,1],[51,1],[59,1],[11,1],[38,1],[40,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
        return stringConcate($$[$0-1] + appendTail);
    
break;
case 2: this.$ = $$[$0] 
break;
case 3: this.$ = $$[$0-1] + $$[$0] 
break;
case 9:
        this.$ = createMixinNode($$[$0-1], "", $$[$0]);
    
break;
case 10:
        this.$ = createMixinNode($$[$0-2], $$[$0-1], $$[$0]);
    
break;
case 11:
        this.$ = "var " + $$[$0-1] + " = require(" + $$[$0] + ");";
    
break;
case 12:
        this.$ = $$[$0-2].split(',').map(function (names) {
            var name = names.split(' ')
            return 'var ' + name[1] + '= require(' + $$[$0] + ')["' + name[0] + '"];'
        }).join('')
    
break;
case 13:
        this.$ = $$[$0];
    
break;
case 14:
        this.$ = $$[$0-2] + "," + $$[$0];
    
break;
case 15:
        this.$ = $$[$0] + " " + $$[$0]
    
break;
case 16:
        this.$ = $$[$0-2] + " " + $$[$0]
    
break;
case 17:
        this.$ = $$[$0-2] + " " + $$[$0]
    
break;
case 20: this.$ = $$[$0] 
break;
case 21: this.$ = $$[$0] 
break;
case 22:
        this.$ = createExportNode($$[$0-1], $$[$0-1], "", $$[$0]);
    
break;
case 23:
        this.$ = createExportNode($$[$0-2], $$[$0-2], $$[$0-1], $$[$0]);
    
break;
case 25: this.$ = $$[$0-1] 
break;
case 26:
        this.$ = createExportNode("default", createName(), "", $$[$0]);
    
break;
case 27:
        this.$ = createExportNode("default", createName(), $$[$0-1], $$[$0]);
    
break;
case 28:
        this.$ = createExportNode("default", $$[$0-1], "", $$[$0]);
    
break;
case 29:
        this.$ = createExportNode("default", $$[$0-2], $$[$0-1], $$[$0]);
    
break;
case 31: this.$ = $$[$0-1] 
break;
case 33: this.$ = $$[$0-1] + $$[$0]; 
break;
case 43:
        this.$ = "if(" + $$[$0-1] + "){" + $$[$0] + "}";
    
break;
case 44:
        this.$ = "if(" + $$[$0-2] + "){" + $$[$0-1] + "}" + $$[$0] + "}";
    
break;
case 45:
        this.$ = "else {" + $$[$0] + "}";
    
break;
case 46:
        this.$ = "else {" + $$[$0-1] + "}" + $$[$0];
    
break;
case 47:
        this.$ = "else if (" + $$[$0-1] + ") {" + $$[$0] + "}";
    
break;
case 48:
        this.$ = "else if (" + $$[$0-2] + ") {" + $$[$0-1] + "}" + $$[$0];
    
break;
case 49:
        this.$ = "else if (" + $$[$0-1] + ") {" + $$[$0] + "}";
    
break;
case 50:
        this.$ = "else if (" + $$[$0-2] + ") {" + $$[$0-1] + "}" + $$[$0];
    
break;
case 51: this.$ = createTagNode($$[$0], "", ""); 
break;
case 52: this.$ = createTagNode($$[$0-2], "", $$[$0]); 
break;
case 53: this.$ = createTagNode($$[$0-1], $$[$0], ""); 
break;
case 54: this.$ = createTagNode($$[$0-3], $$[$0-2], $$[$0]); 
break;
case 55: this.$ = ""; 
break;
case 56: this.$ = $$[$0-1]; 
break;
case 58: this.$ = $$[$0-1] + $$[$0]; 
break;
case 59: this.$ = $$[$0-2] + $$[$0]; 
break;
case 60: this.$ = "this.push(' " + $$[$0] + "');"; 
break;
case 61: this.$ = "this.push(' ' + (" + $$[$0].slice(1, -1) + "));"; 
break;
case 62: this.$ = "this.push(' " + $$[$0-2] + "=\"" + $$[$0] + "\"');"; 
break;
case 63: this.$ = "this.push(' " + $$[$0-2] + "=\"'+(" + $$[$0].slice(1, -1) + ")+'\"');"; 
break;
case 64:
        this.$ = "while (" + $$[$0-1] + ") {" + $$[$0] + "}";
    
break;
case 65:
        this.$ = "this.each(" + $$[$0-1] + "," + "function(" + $$[$0-3] + "){" + $$[$0] + "}, this);";
    
break;
case 66:
        this.$ = "this.each(" + $$[$0-1] + "," + "function(" + $$[$0-3] + "," + $$[$0-5] + "){" + $$[$0] + "}, this);";
    
break;
case 67:
        this.$ = 'this.push(' + $$[$0-2].slice(1) + '.call(this));'
    
break;
case 68:
        this.$ = 'this.push(' + $$[$0-3].slice(1) + '.call(this' + $$[$0-1] + '));'
    
break;
case 69:
        this.$ = ',' + $$[$0]
    
break;
case 70:
        this.$ = ',' + $$[$0-2] + $$[$0]
    
break;
case 73: this.$ = ""; 
break;
case 74: this.$ = $$[$0-1]; 
break;
case 75: this.$ = ""; 
break;
case 76: this.$ = $$[$0-1]; 
break;
case 78: this.$ = $$[$0-2] + ", " + $$[$0]; 
break;
case 79: this.$ = createStringNode($$[$0]); 
break;
case 80: this.$ = $$[$0].slice(1, -1); 
break;
case 81: this.$ = $$[$0].slice(1, -1); 
break;
case 82: this.$ = $$[$0].slice(1);     
break;
case 83: this.$ = ""; 
break;
case 84: this.$ = $$[$0].slice(1); 
break;
case 85: this.$ = "this.push(" + $$[$0].slice(1, -1) + ");"; 
break;
case 86: this.$ = $$[$0].slice(1, -1); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:[1,9],16:[1,10],24:[1,15],28:11,29:[1,14],30:12,61:[1,13]},{1:[3]},{5:[1,16]},{4:17,5:[2,2],6:3,7:4,8:5,9:6,10:7,11:8,12:[1,9],16:[1,10],24:[1,15],28:11,29:[1,14],30:12,61:[1,13]},{5:[2,4],12:[2,4],16:[2,4],24:[2,4],29:[2,4],61:[2,4]},{5:[2,5],12:[2,5],16:[2,5],24:[2,5],29:[2,5],61:[2,5]},{5:[2,6],12:[2,6],16:[2,6],24:[2,6],29:[2,6],61:[2,6]},{5:[2,7],12:[2,7],16:[2,7],24:[2,7],29:[2,7],61:[2,7]},{5:[2,8],12:[2,8],16:[2,8],24:[2,8],29:[2,8],61:[2,8]},{13:[1,18]},{13:[1,19],18:[1,20]},{13:[1,21]},{13:[1,24],14:22,15:23,18:[1,25],45:[1,26]},{5:[2,84],12:[2,84],13:[2,84],16:[2,84],18:[2,84],20:[2,84],24:[2,84],25:[2,84],26:[2,84],29:[2,84],39:[2,84],49:[2,84],52:[2,84],54:[2,84],58:[2,84],61:[2,84]},{12:[1,27],13:[2,24]},{12:[1,28],13:[2,30],18:[2,30],45:[2,30]},{1:[2,1]},{5:[2,3]},{14:29,15:30,18:[1,25],45:[1,26]},{17:31,25:[1,32],26:[1,33],27:[1,34]},{13:[1,37],19:35,21:36,24:[1,38]},{14:39,15:40,18:[1,25],45:[1,26]},{5:[2,26],12:[2,26],16:[2,26],24:[2,26],29:[2,26],61:[2,26]},{14:41,18:[1,25]},{14:42,15:43,18:[1,25],45:[1,26]},{7:52,11:54,12:[1,9],13:[1,57],14:51,18:[1,25],20:[1,44],25:[1,62],26:[1,63],31:45,32:46,33:47,34:48,35:49,36:50,37:53,38:55,39:[1,56],49:[1,61],51:60,52:[1,58],54:[1,59],58:[1,64],61:[1,13]},{13:[1,67],46:[1,65],57:66},{13:[2,25]},{13:[2,31],18:[2,31],45:[2,31]},{5:[2,9],12:[2,9],13:[2,9],16:[2,9],18:[2,9],20:[2,9],24:[2,9],25:[2,9],26:[2,9],29:[2,9],39:[2,9],49:[2,9],52:[2,9],54:[2,9],58:[2,9],61:[2,9]},{14:68,18:[1,25]},{5:[2,11],12:[2,11],16:[2,11],24:[2,11],29:[2,11],61:[2,11]},{5:[2,18],12:[2,18],16:[2,18],24:[2,18],29:[2,18],61:[2,18]},{5:[2,19],12:[2,19],16:[2,19],24:[2,19],29:[2,19],61:[2,19]},{25:[1,69],26:[1,70]},{20:[1,71]},{20:[2,13],22:[1,72]},{20:[2,15],22:[2,15],23:[1,73]},{23:[1,74]},{5:[2,22],12:[2,22],16:[2,22],24:[2,22],29:[2,22],61:[2,22]},{14:75,18:[1,25]},{5:[2,27],12:[2,27],16:[2,27],24:[2,27],29:[2,27],61:[2,27]},{5:[2,28],12:[2,28],16:[2,28],24:[2,28],29:[2,28],61:[2,28]},{14:76,18:[1,25]},{5:[2,73],12:[2,73],13:[2,73],16:[2,73],18:[2,73],20:[2,73],24:[2,73],25:[2,73],26:[2,73],29:[2,73],39:[2,73],42:[2,73],49:[2,73],52:[2,73],54:[2,73],58:[2,73],61:[2,73]},{20:[1,77]},{7:52,11:54,12:[1,9],13:[1,57],14:51,18:[1,25],20:[2,32],25:[1,62],26:[1,63],31:78,32:46,33:47,34:48,35:49,36:50,37:53,38:55,39:[1,56],49:[1,61],51:60,52:[1,58],54:[1,59],58:[1,64],61:[1,13]},{12:[2,34],13:[2,34],18:[2,34],20:[2,34],25:[2,34],26:[2,34],39:[2,34],49:[2,34],52:[2,34],54:[2,34],58:[2,34],61:[2,34]},{12:[2,35],13:[2,35],18:[2,35],20:[2,35],25:[2,35],26:[2,35],39:[2,35],49:[2,35],52:[2,35],54:[2,35],58:[2,35],61:[2,35]},{12:[2,36],13:[2,36],18:[2,36],20:[2,36],25:[2,36],26:[2,36],39:[2,36],49:[2,36],52:[2,36],54:[2,36],58:[2,36],61:[2,36]},{12:[2,37],13:[2,37],18:[2,37],20:[2,37],25:[2,37],26:[2,37],39:[2,37],49:[2,37],52:[2,37],54:[2,37],58:[2,37],61:[2,37]},{12:[2,38],13:[2,38],18:[2,38],20:[2,38],25:[2,38],26:[2,38],39:[2,38],49:[2,38],52:[2,38],54:[2,38],58:[2,38],61:[2,38]},{12:[2,39],13:[2,39],18:[2,39],20:[2,39],25:[2,39],26:[2,39],39:[2,39],49:[2,39],52:[2,39],54:[2,39],58:[2,39],61:[2,39]},{12:[2,40],13:[2,40],18:[2,40],20:[2,40],25:[2,40],26:[2,40],39:[2,40],49:[2,40],52:[2,40],54:[2,40],58:[2,40],61:[2,40]},{12:[2,41],13:[2,41],18:[2,41],20:[2,41],25:[2,41],26:[2,41],39:[2,41],49:[2,41],52:[2,41],54:[2,41],58:[2,41],61:[2,41]},{12:[2,42],13:[2,42],18:[2,42],20:[2,42],25:[2,42],26:[2,42],39:[2,42],49:[2,42],52:[2,42],54:[2,42],58:[2,42],61:[2,42]},{40:79,49:[1,80]},{12:[2,51],13:[2,51],18:[2,51],20:[2,51],25:[2,51],26:[2,51],39:[2,51],43:[1,81],44:82,45:[1,83],49:[2,51],52:[2,51],54:[2,51],58:[2,51],61:[2,51]},{13:[1,85],40:84,49:[1,80]},{45:[1,86]},{12:[2,79],13:[2,79],18:[2,79],20:[2,79],25:[2,79],26:[2,79],39:[2,79],49:[2,79],52:[2,79],54:[2,79],58:[2,79],61:[2,79]},{12:[2,85],13:[2,85],18:[2,85],20:[2,85],25:[2,85],26:[2,85],39:[2,85],49:[2,85],52:[2,85],54:[2,85],58:[2,85],61:[2,85]},{12:[2,80],13:[2,80],18:[2,80],20:[2,80],22:[2,80],25:[2,80],26:[2,80],39:[2,80],46:[2,80],49:[2,80],52:[2,80],54:[2,80],58:[2,80],61:[2,80]},{12:[2,81],13:[2,81],18:[2,81],20:[2,81],22:[2,81],25:[2,81],26:[2,81],39:[2,81],46:[2,81],49:[2,81],52:[2,81],54:[2,81],58:[2,81],61:[2,81]},{12:[2,82],13:[2,82],18:[2,82],20:[2,82],22:[2,82],25:[2,82],26:[2,82],39:[2,82],46:[2,82],49:[2,82],52:[2,82],54:[2,82],58:[2,82],61:[2,82]},{18:[2,75]},{46:[1,87]},{22:[1,88],46:[2,77]},{5:[2,10],12:[2,10],13:[2,10],16:[2,10],18:[2,10],20:[2,10],24:[2,10],25:[2,10],26:[2,10],29:[2,10],39:[2,10],49:[2,10],52:[2,10],54:[2,10],58:[2,10],61:[2,10]},{5:[2,20],12:[2,20],16:[2,20],24:[2,20],29:[2,20],61:[2,20]},{5:[2,21],12:[2,21],16:[2,21],24:[2,21],29:[2,21],61:[2,21]},{17:89,25:[1,32],26:[1,33],27:[1,34]},{13:[1,37],19:90,21:36,24:[1,38]},{13:[1,91]},{13:[1,92]},{5:[2,23],12:[2,23],16:[2,23],24:[2,23],29:[2,23],61:[2,23]},{5:[2,29],12:[2,29],16:[2,29],24:[2,29],29:[2,29],61:[2,29]},{5:[2,74],12:[2,74],13:[2,74],16:[2,74],18:[2,74],20:[2,74],24:[2,74],25:[2,74],26:[2,74],29:[2,74],39:[2,74],42:[2,74],49:[2,74],52:[2,74],54:[2,74],58:[2,74],61:[2,74]},{20:[2,33]},{14:93,18:[1,25]},{18:[2,86],22:[2,86],46:[2,86]},{7:52,11:54,12:[1,9],13:[1,57],14:51,18:[1,25],25:[1,62],26:[1,63],32:94,33:47,34:48,35:49,36:50,37:53,38:55,39:[1,56],49:[1,61],51:60,52:[1,58],54:[1,59],58:[1,64],61:[1,13]},{12:[2,53],13:[2,53],18:[2,53],20:[2,53],25:[2,53],26:[2,53],39:[2,53],43:[1,95],49:[2,53],52:[2,53],54:[2,53],58:[2,53],61:[2,53]},{13:[1,99],46:[1,96],47:97,48:98,49:[1,100]},{14:101,18:[1,25]},{43:[1,103],53:[1,102]},{13:[1,107],40:108,46:[1,104],49:[1,80],55:105,56:106},{18:[2,76]},{13:[1,67],57:109},{5:[2,12],12:[2,12],16:[2,12],24:[2,12],29:[2,12],61:[2,12]},{20:[2,14]},{20:[2,16],22:[2,16]},{20:[2,17],22:[2,17]},{12:[2,43],13:[2,43],18:[2,43],20:[2,43],25:[2,43],26:[2,43],39:[2,43],41:110,42:[1,111],49:[2,43],52:[2,43],54:[2,43],58:[2,43],61:[2,43]},{12:[2,52],13:[2,52],18:[2,52],20:[2,52],25:[2,52],26:[2,52],39:[2,52],49:[2,52],52:[2,52],54:[2,52],58:[2,52],61:[2,52]},{7:52,11:54,12:[1,9],13:[1,57],14:51,18:[1,25],25:[1,62],26:[1,63],32:112,33:47,34:48,35:49,36:50,37:53,38:55,39:[1,56],49:[1,61],51:60,52:[1,58],54:[1,59],58:[1,64],61:[1,13]},{12:[2,55],13:[2,55],18:[2,55],20:[2,55],25:[2,55],26:[2,55],39:[2,55],43:[2,55],49:[2,55],52:[2,55],54:[2,55],58:[2,55],61:[2,55]},{46:[1,113]},{13:[1,99],22:[1,115],46:[2,57],47:114,48:98,49:[1,100]},{13:[2,60],22:[2,60],46:[2,60],49:[2,60],50:[1,116]},{13:[2,61],22:[2,61],46:[2,61],49:[2,61]},{12:[2,64],13:[2,64],18:[2,64],20:[2,64],25:[2,64],26:[2,64],39:[2,64],49:[2,64],52:[2,64],54:[2,64],58:[2,64],61:[2,64]},{40:117,49:[1,80]},{13:[1,118]},{12:[2,67],13:[2,67],18:[2,67],20:[2,67],25:[2,67],26:[2,67],39:[2,67],49:[2,67],52:[2,67],54:[2,67],58:[2,67],61:[2,67]},{46:[1,119]},{22:[1,120],46:[2,69]},{22:[2,71],46:[2,71]},{22:[2,72],46:[2,72]},{46:[2,78]},{12:[2,44],13:[2,44],18:[2,44],20:[2,44],25:[2,44],26:[2,44],39:[2,44],49:[2,44],52:[2,44],54:[2,44],58:[2,44],61:[2,44]},{14:121,18:[1,25],39:[1,123],40:122,49:[1,80]},{12:[2,54],13:[2,54],18:[2,54],20:[2,54],25:[2,54],26:[2,54],39:[2,54],49:[2,54],52:[2,54],54:[2,54],58:[2,54],61:[2,54]},{12:[2,56],13:[2,56],18:[2,56],20:[2,56],25:[2,56],26:[2,56],39:[2,56],43:[2,56],49:[2,56],52:[2,56],54:[2,56],58:[2,56],61:[2,56]},{46:[2,58]},{13:[1,99],47:124,48:98,49:[1,100]},{25:[1,62],26:[1,63],49:[1,126],51:125,58:[1,64]},{14:127,18:[1,25]},{53:[1,128]},{12:[2,68],13:[2,68],18:[2,68],20:[2,68],25:[2,68],26:[2,68],39:[2,68],49:[2,68],52:[2,68],54:[2,68],58:[2,68],61:[2,68]},{13:[1,107],40:108,49:[1,80],55:129,56:106},{12:[2,45],13:[2,45],18:[2,45],20:[2,45],25:[2,45],26:[2,45],39:[2,45],41:130,42:[1,111],49:[2,45],52:[2,45],54:[2,45],58:[2,45],61:[2,45]},{14:131,18:[1,25]},{40:132,49:[1,80]},{46:[2,59]},{13:[2,62],22:[2,62],46:[2,62],49:[2,62]},{13:[2,63],22:[2,63],46:[2,63],49:[2,63]},{12:[2,65],13:[2,65],18:[2,65],20:[2,65],25:[2,65],26:[2,65],39:[2,65],49:[2,65],52:[2,65],54:[2,65],58:[2,65],61:[2,65]},{40:133,49:[1,80]},{46:[2,70]},{12:[2,46],13:[2,46],18:[2,46],20:[2,46],25:[2,46],26:[2,46],39:[2,46],49:[2,46],52:[2,46],54:[2,46],58:[2,46],61:[2,46]},{12:[2,47],13:[2,47],18:[2,47],20:[2,47],25:[2,47],26:[2,47],39:[2,47],41:134,42:[1,111],49:[2,47],52:[2,47],54:[2,47],58:[2,47],61:[2,47]},{14:135,18:[1,25]},{14:136,18:[1,25]},{12:[2,48],13:[2,48],18:[2,48],20:[2,48],25:[2,48],26:[2,48],39:[2,48],49:[2,48],52:[2,48],54:[2,48],58:[2,48],61:[2,48]},{12:[2,49],13:[2,49],18:[2,49],20:[2,49],25:[2,49],26:[2,49],39:[2,49],41:137,42:[1,111],49:[2,49],52:[2,49],54:[2,49],58:[2,49],61:[2,49]},{12:[2,66],13:[2,66],18:[2,66],20:[2,66],25:[2,66],26:[2,66],39:[2,66],49:[2,66],52:[2,66],54:[2,66],58:[2,66],61:[2,66]},{12:[2,50],13:[2,50],18:[2,50],20:[2,50],25:[2,50],26:[2,50],39:[2,50],49:[2,50],52:[2,50],54:[2,50],58:[2,50],61:[2,50]}],
defaultActions: {16:[2,1],17:[2,3],27:[2,25],65:[2,75],78:[2,33],87:[2,76],90:[2,14],109:[2,78],114:[2,58],124:[2,59],129:[2,70]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/*
this.push("abcd");
this.push("efgh");

=>

this.push("abcdefgh");

*/

function stringConcate(source) {
    return source
        .replace(/\"\)\;\s*this\.push\(\"/g, '')
        .replace(/\'\)\;\s*this\.push\(\'/g, '')
}

function replaceEscapeCharacters (str) {
    return str.replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/"/g, '&quot;');
}

function pushString (string) {
    return "this.push('" + string + "');";
}

var id = 0;
// create anonymous name
function createName () {
    return "__" + id++;
}

// append to the end of each template
var appendTail = "module.exports = exports['default'] = exports['default'] || (function () {});"
               + "Object.keys(exports).forEach(function (name) {"
               + "    module.exports[name] = exports[name];"
               + "});"
               ;

function createTagNode (tag, attribute, body) {
    return pushString("<" + tag)
         + attribute
         + pushString(">")
         + body
         + pushString("</" + tag + ">");
}

function createForNode (args, exp, body) {
    return "this.each(" + exp.slice(1, -1) + ",function(" + args + "){"
         +      body
         + "}, this);"
}

function createExportNode (exportName, scopeName, args, body) {
    return "exports['" + exportName + "']=" + scopeName + ";"
         + createMixinNode(scopeName, args, body);
}

function createMixinNode (name, args, body) {
    return "function " + name + "(" + args + "){"
         +      body
         + "}";
}

function createStringNode (string) {
    return pushString(replaceEscapeCharacters(string));
}
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace        */
break;
case 1:/* skip comment           */
break;
case 2:/* skip multiline comment */
break;
case 3:return 61
break;
case 4:return 49
break;
case 5:return 58 // block string
break;
case 6:return 25
break;
case 7:return 26
break;
case 8:return 16
break;
case 9:return 29
break;
case 10:return 24
break;
case 11:return 52
break;
case 12:return 53
break;
case 13:return 39
break;
case 14:return 42
break;
case 15:return 12
break;
case 16:return 27
break;
case 17:return 23
break;
case 18:return 13
break;
case 19:return 54
break;
case 20:return 22
break;
case 21:return 43
break;
case 22:return 45
break;
case 23:return 46
break;
case 24:return 18
break;
case 25:return 20
break;
case 26:return 50
break;
case 27:return '!'
break;
case 28:return '%'
break;
case 29:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:(\/\/).*)/,/^(?:(\/\*)(.|\n|\r)*?(\*\/))/,/^(?:%.*)/,/^(?:`[^\`]*`)/,/^(?:\|.*)/,/^(?:'(\\.|[^'])*')/,/^(?:"(\\.|[^"])*")/,/^(?:import\b)/,/^(?:export\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:mixin\b)/,/^(?:from\b)/,/^(?:as\b)/,/^(?:[a-zA-Z_$][a-zA-Z_$0-9]*)/,/^(?:@[a-zA-Z_$][a-zA-Z_$0-9]*)/,/^(?:,)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:!)/,/^(?:%)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}